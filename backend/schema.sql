CREATE TABLE PUBLIC.COMMENTS (
	ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	POST_ID INTEGER NOT NULL,
	PARENT_ID INTEGER,
	HAS_PARENT BOOLEAN,
	CONTENT TEXT NOT NULL,
	CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	IS_EDITED BOOLEAN DEFAULT FALSE,
	KARMA_COUNT INTEGER DEFAULT 0 NOT NULL,
	IS_DELETED BOOLEAN DEFAULT FALSE NOT NULL
);

CREATE TABLE PUBLIC.REACTIONS (
	ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	POST_ID INTEGER,
	COMMENT_ID INTEGER,
	IS_UPVOTE BOOLEAN NOT NULL,
	CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE VIEW PUBLIC.COMMENT_INFO AS
SELECT
	C.ID AS COMMENT_ID,
	COALESCE(
		SUM(
			CASE
				WHEN (R.IS_UPVOTE IS TRUE) THEN 1
				WHEN (R.IS_UPVOTE IS FALSE) THEN '-1'::INTEGER
				ELSE 0
			END
		),
		(0)::BIGINT
	) AS COMMENT_KARMA
FROM
	(
		PUBLIC.COMMENTS C
		LEFT JOIN PUBLIC.REACTIONS R ON ((R.COMMENT_ID = C.ID))
	)
GROUP BY
	C.ID;

CREATE SEQUENCE PUBLIC.COMMENTS_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

ALTER SEQUENCE PUBLIC.COMMENTS_ID_SEQ OWNED BY PUBLIC.COMMENTS.ID;

CREATE TABLE PUBLIC.MESSAGES (
	ID INTEGER NOT NULL,
	SENDER_ID INTEGER NOT NULL,
	RECEIVER_ID INTEGER NOT NULL,
	CONTENT TEXT NOT NULL,
	CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	SEEN BOOLEAN DEFAULT FALSE NOT NULL,
	SEEN_AT TIMESTAMP WITH TIME ZONE,
	IS_EDITED BOOLEAN DEFAULT FALSE NOT NULL
);

CREATE SEQUENCE PUBLIC.MESSAGES_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

ALTER SEQUENCE PUBLIC.MESSAGES_ID_SEQ OWNED BY PUBLIC.MESSAGES.ID;

CREATE TABLE PUBLIC.POSTS (
	ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	SUBTHREAD_ID INTEGER NOT NULL,
	TITLE TEXT NOT NULL,
	MEDIA TEXT,
	CONTENT TEXT,
	CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	IS_EDITED BOOLEAN DEFAULT FALSE,
	KARMA_COUNT INTEGER DEFAULT 0 NOT NULL,
	COMMENT_COUNT INTEGER DEFAULT 0 NOT NULL
);

CREATE VIEW PUBLIC.POST_INFO AS
SELECT
	P.ID AS POST_ID,
	COALESCE(R.POST_KARMA, (0)::BIGINT) AS POST_KARMA,
	COUNT(DISTINCT C.ID) AS COMMENT_COUNT
FROM
	(
		(
			PUBLIC.POSTS P
			LEFT JOIN (
				SELECT
					REACTIONS.POST_ID,
					SUM(
						CASE
							WHEN (REACTIONS.IS_UPVOTE IS TRUE) THEN 1
							WHEN (REACTIONS.IS_UPVOTE IS FALSE) THEN '-1'::INTEGER
							ELSE 0
						END
					) AS POST_KARMA
				FROM
					PUBLIC.REACTIONS
				GROUP BY
					REACTIONS.POST_ID
			) R ON ((R.POST_ID = P.ID))
		)
		LEFT JOIN PUBLIC.COMMENTS C ON (
			(
				(C.POST_ID = P.ID)
				AND (C.IS_DELETED IS FALSE)
			)
		)
	)
GROUP BY
	P.ID,
	R.POST_KARMA;

CREATE SEQUENCE PUBLIC.POSTS_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

ALTER SEQUENCE PUBLIC.POSTS_ID_SEQ OWNED BY PUBLIC.POSTS.ID;

CREATE SEQUENCE PUBLIC.REACTIONS_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

ALTER SEQUENCE PUBLIC.REACTIONS_ID_SEQ OWNED BY PUBLIC.REACTIONS.ID;

CREATE TABLE PUBLIC.ROLES (
	ID INTEGER NOT NULL,
	NAME TEXT NOT NULL,
	SLUG TEXT NOT NULL
);

CREATE SEQUENCE PUBLIC.ROLES_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

ALTER SEQUENCE PUBLIC.ROLES_ID_SEQ OWNED BY PUBLIC.ROLES.ID;

CREATE TABLE PUBLIC.SAVED (
	ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	POST_ID INTEGER NOT NULL,
	CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE SEQUENCE PUBLIC.SAVED_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

ALTER SEQUENCE PUBLIC.SAVED_ID_SEQ OWNED BY PUBLIC.SAVED.ID;

CREATE TABLE PUBLIC.SUBSCRIPTIONS (
	ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	SUBTHREAD_ID INTEGER NOT NULL,
	CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE SEQUENCE PUBLIC.SUBSCRIPTIONS_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

ALTER SEQUENCE PUBLIC.SUBSCRIPTIONS_ID_SEQ OWNED BY PUBLIC.SUBSCRIPTIONS.ID;

CREATE TABLE PUBLIC.SUBTHREADS (
	ID INTEGER NOT NULL,
	NAME CHARACTER VARYING(20) NOT NULL,
	DESCRIPTION TEXT,
	CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	LOGO TEXT,
	CREATED_BY INTEGER NOT NULL,
	POST_COUNT INTEGER DEFAULT 0 NOT NULL,
	COMMENT_COUNT INTEGER DEFAULT 0 NOT NULL,
	SUBSCRIBER_COUNT INTEGER DEFAULT 0 NOT NULL
);

CREATE VIEW PUBLIC.SUBTHREAD_INFO AS
SELECT
	T.ID AS SUBTHREAD_ID,
	COUNT(DISTINCT P.ID) AS POST_COUNT,
	COUNT(DISTINCT C.ID) AS COMMENT_COUNT,
	COUNT(DISTINCT S.ID) AS SUBSCRIBER_COUNT
FROM
	(
		(
			(
				PUBLIC.SUBTHREADS T
				LEFT JOIN PUBLIC.POSTS P ON ((P.SUBTHREAD_ID = T.ID))
			)
			LEFT JOIN PUBLIC.COMMENTS C ON (
				(
					(C.POST_ID = P.ID)
					AND (C.IS_DELETED IS FALSE)
				)
			)
		)
		LEFT JOIN PUBLIC.SUBSCRIPTIONS S ON ((S.SUBTHREAD_ID = T.ID))
	)
GROUP BY
	T.ID;

CREATE SEQUENCE PUBLIC.SUBTHREADS_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

ALTER SEQUENCE PUBLIC.SUBTHREADS_ID_SEQ OWNED BY PUBLIC.SUBTHREADS.ID;

CREATE TABLE PUBLIC.USERS (
	ID INTEGER NOT NULL,
	USERNAME TEXT NOT NULL,
	PASSWORD_HASH TEXT NOT NULL,
	EMAIL TEXT NOT NULL,
	AVATAR TEXT,
	BIO TEXT,
	REGISTRATION_DATE TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	POST_KARMA INTEGER DEFAULT 0 NOT NULL,
	POST_COUNT INTEGER DEFAULT 0 NOT NULL,
	COMMENT_KARMA INTEGER DEFAULT 0 NOT NULL,
	COMMENT_COUNT INTEGER DEFAULT 0 NOT NULL
);

CREATE VIEW PUBLIC.USER_INFO AS
SELECT
	U.ID AS USER_ID,
	COALESCE(P.POST_COUNT, (0)::BIGINT) AS POST_COUNT,
	COALESCE(P.POST_KARMA, (0)::BIGINT) AS POST_KARMA,
	COALESCE(C.COMMENT_COUNT, (0)::BIGINT) AS COMMENT_COUNT,
	COALESCE(C.COMMENT_KARMA, (0)::BIGINT) AS COMMENT_KARMA
FROM
	(
		(
			PUBLIC.USERS U
			LEFT JOIN (
				SELECT
					COUNT(DISTINCT P_1.ID) AS POST_COUNT,
					U_1.ID AS USER_ID,
					COALESCE(
						SUM(
							CASE
								WHEN (R.IS_UPVOTE IS TRUE) THEN 1
								WHEN (R.IS_UPVOTE IS FALSE) THEN '-1'::INTEGER
								ELSE 0
							END
						),
						(0)::BIGINT
					) AS POST_KARMA
				FROM
					(
						(
							PUBLIC.USERS U_1
							JOIN PUBLIC.POSTS P_1 ON ((P_1.USER_ID = U_1.ID))
						)
						LEFT JOIN PUBLIC.REACTIONS R ON ((R.POST_ID = P_1.ID))
					)
				GROUP BY
					U_1.ID
			) P ON ((P.USER_ID = U.ID))
		)
		LEFT JOIN (
			SELECT
				COALESCE(COUNT(DISTINCT C_1.ID), (0)::BIGINT) AS COMMENT_COUNT,
				U_1.ID AS USER_ID,
				COALESCE(
					SUM(
						CASE
							WHEN (R.IS_UPVOTE IS TRUE) THEN 1
							WHEN (R.IS_UPVOTE IS FALSE) THEN '-1'::INTEGER
							ELSE 0
						END
					),
					(0)::BIGINT
				) AS COMMENT_KARMA
			FROM
				(
					(
						PUBLIC.USERS U_1
						JOIN PUBLIC.COMMENTS C_1 ON (
							(
								(C_1.USER_ID = U_1.ID)
								AND (C_1.IS_DELETED IS FALSE)
							)
						)
					)
					LEFT JOIN PUBLIC.REACTIONS R ON ((R.COMMENT_ID = C_1.ID))
				)
			GROUP BY
				U_1.ID
		) C ON ((C.USER_ID = U.ID))
	);

CREATE TABLE PUBLIC.USER_ROLES (
	ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	ROLE_ID INTEGER NOT NULL,
	SUBTHREAD_ID INTEGER,
	CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE SEQUENCE PUBLIC.USER_ROLES_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

ALTER SEQUENCE PUBLIC.USER_ROLES_ID_SEQ OWNED BY PUBLIC.USER_ROLES.ID;

CREATE SEQUENCE PUBLIC.USERS_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

ALTER SEQUENCE PUBLIC.USERS_ID_SEQ OWNED BY PUBLIC.USERS.ID;

ALTER TABLE ONLY PUBLIC.COMMENTS
ALTER COLUMN ID
SET DEFAULT NEXTVAL('public.comments_id_seq'::REGCLASS);

ALTER TABLE ONLY PUBLIC.MESSAGES
ALTER COLUMN ID
SET DEFAULT NEXTVAL('public.messages_id_seq'::REGCLASS);

ALTER TABLE ONLY PUBLIC.POSTS
ALTER COLUMN ID
SET DEFAULT NEXTVAL('public.posts_id_seq'::REGCLASS);

ALTER TABLE ONLY PUBLIC.REACTIONS
ALTER COLUMN ID
SET DEFAULT NEXTVAL('public.reactions_id_seq'::REGCLASS);

ALTER TABLE ONLY PUBLIC.ROLES
ALTER COLUMN ID
SET DEFAULT NEXTVAL('public.roles_id_seq'::REGCLASS);

ALTER TABLE ONLY PUBLIC.SAVED
ALTER COLUMN ID
SET DEFAULT NEXTVAL('public.saved_id_seq'::REGCLASS);

ALTER TABLE ONLY PUBLIC.SUBSCRIPTIONS
ALTER COLUMN ID
SET DEFAULT NEXTVAL('public.subscriptions_id_seq'::REGCLASS);

ALTER TABLE ONLY PUBLIC.SUBTHREADS
ALTER COLUMN ID
SET DEFAULT NEXTVAL('public.subthreads_id_seq'::REGCLASS);

ALTER TABLE ONLY PUBLIC.USER_ROLES
ALTER COLUMN ID
SET DEFAULT NEXTVAL('public.user_roles_id_seq'::REGCLASS);

ALTER TABLE ONLY PUBLIC.USERS
ALTER COLUMN ID
SET DEFAULT NEXTVAL('public.users_id_seq'::REGCLASS);

ALTER TABLE ONLY PUBLIC.COMMENTS
ADD CONSTRAINT COMMENTS_PKEY PRIMARY KEY (ID);

ALTER TABLE ONLY PUBLIC.MESSAGES
ADD CONSTRAINT MESSAGES_PKEY PRIMARY KEY (ID);

ALTER TABLE ONLY PUBLIC.POSTS
ADD CONSTRAINT POSTS_PKEY PRIMARY KEY (ID);

ALTER TABLE ONLY PUBLIC.REACTIONS
ADD CONSTRAINT REACTIONS_PKEY PRIMARY KEY (ID);

ALTER TABLE ONLY PUBLIC.REACTIONS
ADD CONSTRAINT REACTIONS_USER_ID_COMMENT_ID_KEY UNIQUE (USER_ID, COMMENT_ID);

ALTER TABLE ONLY PUBLIC.REACTIONS
ADD CONSTRAINT REACTIONS_USER_ID_POST_ID_KEY UNIQUE (USER_ID, POST_ID);

ALTER TABLE ONLY PUBLIC.ROLES
ADD CONSTRAINT ROLES_NAME_KEY UNIQUE (NAME);

ALTER TABLE ONLY PUBLIC.ROLES
ADD CONSTRAINT ROLES_PKEY PRIMARY KEY (ID);

ALTER TABLE ONLY PUBLIC.ROLES
ADD CONSTRAINT ROLES_SLUG_KEY UNIQUE (SLUG);

ALTER TABLE ONLY PUBLIC.SAVED
ADD CONSTRAINT SAVED_PKEY PRIMARY KEY (ID);

ALTER TABLE ONLY PUBLIC.SAVED
ADD CONSTRAINT SAVED_USER_ID_POST_ID_KEY UNIQUE (USER_ID, POST_ID);

ALTER TABLE ONLY PUBLIC.SUBSCRIPTIONS
ADD CONSTRAINT SUBSCRIPTIONS_PKEY PRIMARY KEY (ID);

ALTER TABLE ONLY PUBLIC.SUBSCRIPTIONS
ADD CONSTRAINT SUBSCRIPTIONS_USER_ID_SUBTHREAD_ID_KEY UNIQUE (USER_ID, SUBTHREAD_ID);

ALTER TABLE ONLY PUBLIC.SUBTHREADS
ADD CONSTRAINT SUBTHREADS_NAME_KEY UNIQUE (NAME);

ALTER TABLE ONLY PUBLIC.SUBTHREADS
ADD CONSTRAINT SUBTHREADS_PKEY PRIMARY KEY (ID);

ALTER TABLE ONLY PUBLIC.USER_ROLES
ADD CONSTRAINT USER_ROLES_PKEY PRIMARY KEY (ID);

ALTER TABLE ONLY PUBLIC.USER_ROLES
ADD CONSTRAINT USER_ROLES_USER_ID_ROLE_ID_SUBTHREAD_ID_KEY UNIQUE (USER_ID, ROLE_ID, SUBTHREAD_ID);

ALTER TABLE ONLY PUBLIC.USERS
ADD CONSTRAINT USERS_EMAIL_KEY UNIQUE (EMAIL);

ALTER TABLE ONLY PUBLIC.USERS
ADD CONSTRAINT USERS_PKEY PRIMARY KEY (ID);

ALTER TABLE ONLY PUBLIC.USERS
ADD CONSTRAINT USERS_USERNAME_KEY UNIQUE (USERNAME);

ALTER TABLE ONLY PUBLIC.COMMENTS
ADD CONSTRAINT COMMENTS_PARENT_ID_FKEY FOREIGN KEY (PARENT_ID) REFERENCES PUBLIC.COMMENTS (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE ONLY PUBLIC.COMMENTS
ADD CONSTRAINT COMMENTS_POST_ID_FKEY FOREIGN KEY (POST_ID) REFERENCES PUBLIC.POSTS (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE ONLY PUBLIC.COMMENTS
ADD CONSTRAINT COMMENTS_USER_ID_FKEY FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE ONLY PUBLIC.MESSAGES
ADD CONSTRAINT MESSAGES_RECEIVER_ID_FKEY FOREIGN KEY (RECEIVER_ID) REFERENCES PUBLIC.USERS (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE ONLY PUBLIC.MESSAGES
ADD CONSTRAINT MESSAGES_SENDER_ID_FKEY FOREIGN KEY (SENDER_ID) REFERENCES PUBLIC.USERS (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE ONLY PUBLIC.POSTS
ADD CONSTRAINT POSTS_SUBTHREAD_ID_FKEY FOREIGN KEY (SUBTHREAD_ID) REFERENCES PUBLIC.SUBTHREADS (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE ONLY PUBLIC.POSTS
ADD CONSTRAINT POSTS_USER_ID_FKEY FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE ONLY PUBLIC.REACTIONS
ADD CONSTRAINT REACTIONS_COMMENT_ID_FKEY FOREIGN KEY (COMMENT_ID) REFERENCES PUBLIC.COMMENTS (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE ONLY PUBLIC.REACTIONS
ADD CONSTRAINT REACTIONS_POST_ID_FKEY FOREIGN KEY (POST_ID) REFERENCES PUBLIC.POSTS (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE ONLY PUBLIC.REACTIONS
ADD CONSTRAINT REACTIONS_USER_ID_FKEY FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE ONLY PUBLIC.SAVED
ADD CONSTRAINT SAVED_POST_ID_FKEY FOREIGN KEY (POST_ID) REFERENCES PUBLIC.POSTS (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE ONLY PUBLIC.SAVED
ADD CONSTRAINT SAVED_USER_ID_FKEY FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE ONLY PUBLIC.SUBSCRIPTIONS
ADD CONSTRAINT SUBSCRIPTIONS_SUBTHREAD_ID_FKEY FOREIGN KEY (SUBTHREAD_ID) REFERENCES PUBLIC.SUBTHREADS (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE ONLY PUBLIC.SUBSCRIPTIONS
ADD CONSTRAINT SUBSCRIPTIONS_USER_ID_FKEY FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE ONLY PUBLIC.SUBTHREADS
ADD CONSTRAINT SUBTHREADS_CREATED_BY_FKEY FOREIGN KEY (CREATED_BY) REFERENCES PUBLIC.USERS (ID) ON UPDATE CASCADE ON DELETE SET NULL NOT VALID;

ALTER TABLE ONLY PUBLIC.USER_ROLES
ADD CONSTRAINT USER_ROLES_ROLE_ID_FKEY FOREIGN KEY (ROLE_ID) REFERENCES PUBLIC.ROLES (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE ONLY PUBLIC.USER_ROLES
ADD CONSTRAINT USER_ROLES_SUBTHREAD_ID_FKEY FOREIGN KEY (SUBTHREAD_ID) REFERENCES PUBLIC.SUBTHREADS (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE ONLY PUBLIC.USER_ROLES
ADD CONSTRAINT USER_ROLES_USER_ID_FKEY FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS (ID) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;
