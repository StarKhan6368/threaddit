Project Threaddit {
    database_type: 'PostgreSQL'
    Note: "This is Threaddit's database schema."
}

Enum "MediaType" {
  "IMAGE"
  "VIDEO"
  "URL"
}

Enum "VoteType" {
  "UPVOTE"
  "DOWNVOTE"
}

Table "alembic_version" {
  "version_num" VARCHAR(32) [not null]

  Indexes {
    version_num [pk, name: "alembic_version_pkc"]
  }
}

Table "media" {
  "media_id" SERIAL [not null, increment]
  "creator_id" INTEGER [not null]
  "name" TEXT [not null]
  "media_type" MediaType [not null]
  "url" TEXT [not null]
  "cldr_id" TEXT
  "is_nsfw" BOOLEAN [not null, default: false]
  "is_spoiler" BOOLEAN [not null, default: false]
  "created_on" TIMESTAMP [not null, default: `now()`]
  "updated_on" TIMESTAMP

  Indexes {
    media_id [pk]
  }
}

Table "users" {
  "user_id" SERIAL [not null, increment]
  "name" VARCHAR(32) [not null]
  "email" TEXT [not null]
  "hashed_password" TEXT [not null]
  "bio" VARCHAR(256)
  "avatar_id" INTEGER
  "banner_id" INTEGER
  "is_nsfw" BOOLEAN [not null, default: false]
  "post_count" INTEGER [not null, default: "0"]
  "post_karma" INTEGER [not null, default: "0"]
  "comment_count" INTEGER [not null, default: "0"]
  "comment_karma" INTEGER [not null, default: "0"]
  "last_seen" TIMESTAMP [not null, default: `now()`]
  "created_on" TIMESTAMP [not null, default: `now()`]
  "updated_on" TIMESTAMP

  Indexes {
    user_id [pk]
    email [unique, name: "ix_users_email"]
    name [unique, name: "ix_users_name"]
  }
}

Table "threads" {
  "thread_id" SERIAL [not null, increment]
  "name" VARCHAR(16) [not null]
  "description" TEXT
  "flairs" "VARCHAR(16)[]" [not null, default: "{}"]
  "join_message" VARCHAR(256) [not null, default: "Welcome to the Thread, Check the rules."]
  "post_count" INTEGER [not null, default: "0"]
  "comment_count" INTEGER [not null, default: "0"]
  "subscription_count" INTEGER [not null, default: "0"]
  "is_locked" BOOLEAN [not null, default: false]
  "is_nsfw" BOOLEAN [not null, default: false]
  "is_banned" BOOLEAN [not null, default: false]
  "is_private" BOOLEAN [not null, default: false]
  "creator_id" INTEGER [not null]
  "logo_id" INTEGER
  "banner_id" INTEGER
  "created_on" TIMESTAMP [not null, default: `now()`]
  "updated_on" TIMESTAMP

  Indexes {
    thread_id [pk]
    name [unique, name: "ix_threads_name"]
  }
}

Table "posts" {
  "post_id" SERIAL [not null, increment]
  "creator_id" INTEGER [not null]
  "thread_id" INTEGER [not null]
  "title" VARCHAR(126) [not null]
  "content" TEXT [not null]
  "upvote_count" INTEGER [not null, default: "0"]
  "downvote_count" INTEGER [not null, default: "0"]
  "comment_count" INTEGER [not null, default: "0"]
  "save_count" INTEGER [not null, default: "0"]
  "report_count" INTEGER [not null, default: "0"]
  "is_nsfw" BOOLEAN [not null, default: false]
  "is_spoiler" BOOLEAN [not null, default: false]
  "is_sticky" BOOLEAN [not null, default: false]
  "is_deleted" BOOLEAN [not null, default: false]
  "is_removed" BOOLEAN [not null, default: false]
  "is_locked" BOOLEAN [not null, default: false]
  "flairs" "VARCHAR(16)[]" [not null, default: "{}"]
  "search_vector" TSVECTOR [not null]
  "created_on" TIMESTAMP [not null, default: `now()`]
  "updated_on" TIMESTAMP

  Indexes {
    post_id [pk]
    search_vector [type: gin, name: "ix_posts_search_vector"]
  }
}

Table "post_media" {
  "post_id" INTEGER [not null]
  "media_id" INTEGER [not null]

  Indexes {
    (post_id, media_id) [pk]
  }
}

Table "comments" {
  "comment_id" SERIAL [not null, increment]
  "creator_id" INTEGER [not null]
  "thread_id" INTEGER [not null]
  "post_id" INTEGER
  "parent_id" INTEGER
  "content" TEXT
  "media_id" INTEGER
  "upvote_count" INTEGER [not null, default: "0"]
  "downvote_count" INTEGER [not null, default: "0"]
  "replies_count" INTEGER [not null, default: "0"]
  "save_count" INTEGER [not null, default: "0"]
  "report_count" INTEGER [not null, default: "0"]
  "depth" INTEGER [not null, default: "0"]
  "is_nsfw" BOOLEAN [not null, default: false]
  "is_spoiler" BOOLEAN [not null, default: false]
  "is_sticky" BOOLEAN [not null, default: false]
  "is_deleted" BOOLEAN [not null, default: false]
  "is_removed" BOOLEAN [not null, default: false]
  "is_locked" BOOLEAN [not null, default: false]
  "created_on" TIMESTAMP [not null, default: `now()`]
  "updated_on" TIMESTAMP
  "search_vector" TSVECTOR [not null]

  Indexes {
    comment_id [pk]
    search_vector [type: gin, name: "ix_comments_search_vector"]
    (thread_id, post_id, comment_id) [unique, name: "ix_comments_thread_id"]
  }
}

Table "votes" {
  "vote_id" SERIAL [not null, increment]
  "creator_id" INTEGER [not null]
  "post_id" INTEGER [not null]
  "comment_id" INTEGER
  "vote_type" VoteType [not null]
  "created_on" TIMESTAMP [not null, default: `now()`]
  "updated_on" TIMESTAMP

  Indexes {
    vote_id [pk]
    (post_id, creator_id, comment_id) [unique, name: "ix_votes_post_id"]
  }
}

Ref:"media"."media_id" - "users"."avatar_id" [update: cascade, delete: set null]

Ref:"media"."media_id" - "users"."banner_id" [update: cascade, delete: set null]

Ref "media_creator_id_fkey":"users"."user_id" < "media"."creator_id" [update: cascade, delete: restrict]

Ref:"media"."media_id" - "threads"."banner_id" [update: cascade, delete: set null]

Ref:"users"."user_id" - "threads"."creator_id" [update: cascade, delete: restrict]

Ref:"media"."media_id" - "threads"."logo_id" [update: cascade, delete: set null]

Ref:"users"."user_id" < "posts"."creator_id" [update: cascade, delete: restrict]

Ref:"threads"."thread_id" < "posts"."thread_id" [update: cascade, delete: restrict]

Ref:"media"."media_id" - "post_media"."media_id" [update: cascade, delete: cascade]

Ref:"posts"."post_id" < "post_media"."post_id" [update: cascade, delete: cascade]

Ref:"users"."user_id" < "comments"."creator_id" [update: cascade, delete: restrict]

Ref:"media"."media_id" - "comments"."media_id" [update: cascade, delete: set null]

Ref:"comments"."comment_id" > "comments"."parent_id" [update: cascade, delete: restrict]

Ref:"posts"."post_id" < "comments"."post_id" [update: cascade, delete: restrict]

Ref:"threads"."thread_id" < "comments"."thread_id" [update: cascade, delete: restrict]

Ref:"comments"."comment_id" < "votes"."comment_id" [update: cascade, delete: restrict]

Ref:"users"."user_id" < "votes"."creator_id" [update: cascade, delete: restrict]

Ref:"posts"."post_id" < "votes"."post_id" [update: cascade, delete: restrict]
